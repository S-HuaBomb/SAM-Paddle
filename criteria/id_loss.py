import numpy as np
import paddle
from paddle import nn

from configs.paths_config import model_paths
from convert_models.encoders.model_irse import Backbone


class IDLoss(nn.Layer):
    def __init__(self):
        super(IDLoss, self).__init__()
        print('Loading ResNet ArcFace ir_se50_backbone for id loss')
        self.facenet = Backbone(input_size=112, num_layers=50, drop_ratio=0.6, mode='ir_se')
        self.facenet.set_state_dict(paddle.load(model_paths['ir_se50_backbone']))
        self.face_pool = paddle.nn.AdaptiveAvgPool2D((112, 112))
        # self.facenet.eval()
        for name, param in self.facenet.named_parameters():
            param.trainable = False

    def extract_feats(self, x):
        x = x[:, :, 35:223, 32:220]  # Crop interesting region
        x = self.face_pool(x)
        x_feats = self.facenet(x)
        return x_feats

    def forward(self, y_hat, y, x, label=None, weights=None):
        n_samples = x.shape[0]
        x_feats = self.extract_feats(x)
        y_feats = self.extract_feats(y)
        y_hat_feats = self.extract_feats(y_hat)
        y_feats = y_feats.detach()
        total_loss = 0
        sim_improvement = 0
        id_logs = []
        count = 0
        for i in range(n_samples):
            diff_target = y_hat_feats[i].dot(y_feats[i])
            diff_input = y_hat_feats[i].dot(x_feats[i])
            diff_views = y_feats[i].dot(x_feats[i])

            if label is None:
                id_logs.append({'diff_target': float(diff_target),
                                'diff_input': float(diff_input),
                                'diff_views': float(diff_views)})
            else:
                id_logs.append({f'diff_target_{label}': float(diff_target),
                                f'diff_input_{label}': float(diff_input),
                                f'diff_views_{label}': float(diff_views)})

            loss = 1 - diff_target
            if weights is not None:
                loss = weights[i] * loss

            total_loss += loss
            id_diff = float(diff_target) - float(diff_views)
            sim_improvement += id_diff
            count += 1

        return total_loss / count, sim_improvement / count, id_logs

# def main(x0):
#     # There are 1 inputs.
#     # x0: shape-[1, 3, 112, 112], type-float32.
#     paddle.disable_static()
#     params = paddle.load(model_paths['ir_se50_backbone'])
#     model = Backbone()
#     model.set_state_dict(params)
#     model.eval()
#     out = model(x0)
#     return out
#
#
# np.random.seed(42)
# x0 = np.random.randn(1, 3, 112, 112)
#
# if __name__ == '__main__':
#     xp = paddle.to_tensor(x0, dtype='float32')
#     out_p = main(xp)
#     print(out_p)

    #
# def main(x0):
#     # There are 1 inputs.
#     # x0: shape-[1, 3, 112, 112], type-float32.
#     torch_model = Backbone(input_size=112, num_layers=50, drop_ratio=0.6, mode='ir_se')
#     torch_model.load_state_dict(torch.load(model_paths['ir_se50'], map_location=torch.device('cpu')))
#     torch_model.train(False)
#     out = torch_model(x0)
#     return out
#
# if __name__ == '__main__':
#     # convert()
#     from reload_models.x2paddle_code import x0
#     xt = torch.tensor(x0, dtype=torch.float32)
#     out_t = main(xt)
#     print(out_t)

    """
    Tensor(shape=[1, 512], dtype=float32, place=CPUPlace, stop_gradient=False,
       [[ 0.04844742,  0.02448986, -0.08962954, -0.02713561, -0.00760374,  0.09985895,  0.07439251,  0.05031048, -0.04444152, -0.04463803,  0.01881337,  0.05293861, -0.05423215,  0.02032040,  0.05466366,  0.04077109, -0.02097056, -0.02605708, -0.07012090, -0.00561265,  0.05728226, -0.02018018, -0.04263471, -0.02241994, -0.03022264, -0.00786556,  0.00876665,  0.05844194, -0.04140325, -0.09875480, -0.07618671,  0.01224509, -0.02549540,  0.09238485, -0.00140002, -0.06203716,  0.01724948,  0.00406962,  0.04143374, -0.03784681, -0.02787115, -0.04167686,  0.05417417, -0.00241195,  0.04578941,  0.03676802, -0.05701354, -0.06978829, -0.06303392,  0.01371958, -0.00705501,  0.05059331, -0.03220537,  0.02371401, -0.05314551, -0.00926792, -0.01703453, -0.00556874,  0.05201421,  0.01138100, -0.00644657,  0.02200739, -0.02423039, -0.03983225, -0.03004454,  0.02046220, -0.05913273, -0.00909677,  0.04343247,  0.05399249,  0.08722731,  0.09862881,  0.00871797, -0.04191060, -0.02934705,  0.01076057, -0.02022799,  0.04944467,  0.00000408,  0.01473623, -0.02102649,  0.05009798, -0.03916496,  0.02166179, -0.00546427, -0.04151197,  0.00563038,  0.00711244,  0.07314277, -0.02524194,  0.02026609, -0.02993475, -0.05114524,  0.09137522,  0.02959749, -0.02352964, -0.02227561, -0.04397966, -0.02596067,  0.00240397, -0.04210809,  0.01570454,  0.07478027, -0.07177517,  0.07661868, -0.01901096, -0.02021478,  0.09908352,  0.05621585,  0.03278097,  0.00258590,  0.05761665,  0.11357334,  0.00956108, -0.01578865, -0.02912156, -0.04762989, -0.03752077,  0.02627025, -0.01552423, -0.07133462, -0.05078955,  0.04755674,  0.02904336, -0.00054424,  0.08614992, -0.00791572, -0.01908834,  0.01642582, -0.00469191,  0.03344280, -0.06214289, -0.00517440, -0.05580860,  0.02080810, -0.05392352, -0.05336167,  0.00251861,  0.00179974,  0.02398320,  0.01651505,  0.00580008, -0.06830020, -0.05464592, -0.01507370,  0.03068128, -0.03372833,  0.00431742,  0.05330865,  0.06789692, -0.01574066,  0.03970979,  0.07929736,  0.00277116, -0.03678037, -0.04260337, -0.06129731, -0.00115778,  0.05138477, -0.00401671, -0.02422215, -0.01783644, -0.02595671, -0.00358043,  0.04286842, -0.01555696, -0.00461197, -0.06578578,  0.01176671,  0.00790934, -0.02836363, -0.03936661,  0.01518963, -0.06528560, -0.04830820, -0.04691404,  0.00079354,  0.01051696, -0.03838336,  0.01330815, -0.04412086, -0.02707230, -0.00654268,  0.00808145,  0.07310657, -0.01035652,  0.06670154,  0.00975152, -0.08530058, -0.03530357, -0.02053266, -0.05920874, -0.00615691,  0.01299256, -0.03838225, -0.00862781, -0.08176290, -0.01418335,  0.01177678, -0.01022406,  0.02129244,  0.00448641, -0.03288421,  0.04036743,  0.03204849,  0.08834022,  0.00959639,  0.01133092,  0.05393827, -0.03678951,  0.06526832,  0.03464309,  0.02383824,  0.01821286,  0.02272749, -0.04164287,  0.08422926,  0.05191567,  0.06820649, -0.00026097,  0.03902547, -0.01746739,  0.03751121,  0.00817277,  0.03682040,  0.01006457,  0.00991350, -0.06507786,  0.02560685, -0.01163101, -0.02233473,  0.01830455,  0.04381118, -0.06393833, -0.04829676, -0.03137350, -0.12561721, -0.01087449,  0.02477879, -0.02522162,  0.05224090, -0.09650295, -0.08437672,  0.00298220, -0.01122369,  0.00841165, -0.01642893, -0.02694563,  0.00872705, -0.00997228, -0.05011093,  0.06686787, -0.02033366,  0.02149398,  0.08503529,  0.00102164, -0.01355985, -0.03983461,  0.04066823,  0.01740999, -0.05871989,  0.08024048,  0.11075240, -0.03006531, -0.01419765, -0.02290893,  0.01126585, -0.08607066,  0.01553689, -0.03802412,  0.00587223,  0.01270049, -0.05910987, -0.01894732,  0.04643470, -0.02760505,  0.02928944, -0.01205680,  0.02875176,  0.02084136,  0.00194724,  0.05733174,  0.00330737,  0.05125710,  0.04459041, -0.08102936, -0.09033219, -0.03517574,  0.00659727,  0.01957514,  0.00085552, -0.03428110,  0.04532000, -0.01050547, -0.05599461,  0.08381350, -0.02899309,  0.02222903, -0.03085749, -0.00762884,  0.00681674,  0.01478569,  0.07111932,  0.03431666,  0.04543371, -0.00695630,  0.06260186,  0.06577516,  0.02582700, -0.07021482,  0.03475515, -0.04375975, -0.05777488, -0.08435282,  0.03941035,  0.00006972,  0.00092998, -0.03903377,  0.00248262, -0.04101691,  0.01895229,  0.03091410,  0.00090609, -0.04345619,  0.01605293,  0.04453987, -0.01682528, -0.02570982,  0.05452986,  0.12641272, -0.08080225,  0.00875285, -0.02519922,  0.03845550, -0.00447667,  0.02945489, -0.01290028, -0.00760741, -0.07332505,  0.07862526, -0.00043071, -0.00977365, -0.10371574, -0.00958806,  0.01989392, -0.03075788,  0.02310217, -0.00221100,  0.08145579,  0.03572321,  0.04290248, -0.01336678,  0.00908769,  0.00153173,  0.01561518,  0.00769064,  0.00275679,  0.00902881, -0.04078441, -0.01626499, -0.04323564,  0.00593422, -0.02880892,  0.02054722, -0.03150389, -0.03556168,  0.02159184, -0.04003961,  0.06919566, -0.02391310,  0.00460437,  0.03992638,  0.01775551, -0.05822878,  0.04646560, -0.03253093, -0.08854797, -0.03147170, -0.01579395, -0.07491763,  0.07568234,  0.00258903, -0.01469144, -0.00402619,  0.07715163,  0.07375167, -0.01027219,  0.06618005, -0.09655141, -0.00826808,  0.06467027, -0.00694994,  0.02405399, -0.06009801,  0.03904302,  0.03297189,  0.00503979, -0.02515832,  0.01003802, -0.08047731, -0.07027795,  0.01903289, -0.01060618, -0.00770359,  0.04860514,  0.04419880,  0.04289816, -0.06156681,  0.04851097, -0.02807398,  0.08505617, -0.00741061, -0.04454825, -0.06006506, -0.07553502, -0.02332180, -0.01178642, -0.01286902, -0.01079289,  0.06310869, -0.05689343,  0.00405588, -0.03286156,  0.00771501,  0.03716449,  0.02321459, -0.04202960, -0.00539036,  0.02352496, -0.00845959,  0.04932871,  0.02412662,  0.02169772, -0.03292906,  0.07127637, -0.02394881,  0.11548570,  0.01068522, -0.00072040, -0.00960047, -0.00239696, -0.03326548,  0.01874077, -0.00521220, -0.01279618, -0.03807883, -0.01828847, -0.02755230,  0.01544213,  0.05445189, -0.01134627, -0.00636837,  0.03962402, -0.02111308, -0.01147128,  0.07391074,  0.00964276,  0.03490559,  0.01953892, -0.03182479, -0.05316010, -0.01086006,  0.02113002,  0.03698262, -0.03502266,  0.00408476,  0.00381364, -0.02671376,  0.05001364, -0.01964544, -0.02176105,  0.02608519,  0.01458396,  0.01427602,  0.07152858,  0.07126424,  0.05120926, -0.02122125,  0.04564093, -0.06558774, -0.06879391,  0.04462028,  0.05045242, -0.07947502,  0.07159149,  0.01029173,  0.06579637,  0.01062492,  0.02851174,  0.04126977,  0.01097857, -0.01708481, -0.02165593,  0.01707366, -0.11850110,  0.07193740,  0.05498397, -0.01144580,  0.01619207,  0.00290912, -0.12970915,  0.03426630,  0.08034320,  0.05547443,  0.00399294, -0.05800036,  0.01196990,  0.02995941,  0.11821923,  0.05313221,  0.08543837, -0.00015700]])

    """
